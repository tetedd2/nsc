// ================== Firebase Configuration ==================
const firebaseConfig = {
    apiKey: "AIzaSyBjLBl1sEGgQLyng51rW25b434bJ0opVc4",
    authDomain: "myapplication-bd04c034.firebaseapp.com",
    databaseURL: "https://myapplication-bd04c034-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "myapplication-bd04c034",
    storageBucket: "myapplication-bd04c034.firebasestorage.app",
    messagingSenderId: "49782830313",
    appId: "1:49782830313:web:c81b5d86a937f22d296c78"
};

// ==== Import Firebase SDK v9 ====
import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js';
import { getAuth, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js';
import {
    getFirestore, collection, doc, setDoc, getDoc, updateDoc, onSnapshot,
    query, orderBy, addDoc, deleteDoc, serverTimestamp, arrayUnion, increment, runTransaction
} from 'https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js';
import { getStorage } from 'https://www.gstatic.com/firebasejs/9.6.1/firebase-storage.js';

// ================== Firebase Initialization ==================
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

// ================== Game Mechanics (XP & Levels) ==================

// Configuration for levels, names, and XP requirements
const LEVEL_CONFIG = [
    { level: 1, name: "‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", xpToNext: 100 },
    { level: 2, name: "‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏°‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î", xpToNext: 250 },
    { level: 3, name: "‡∏ô‡∏±‡∏Å‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", xpToNext: 500 },
    { level: 4, name: "‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", xpToNext: 1000 },
    { level: 5, name: "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà", xpToNext: Infinity }, // Max level
];

/**
 * Adds XP to the user and checks for level-ups using a transaction.
 * This function handles single and multiple level-ups correctly.
 * @param {string} uid - The user's ID.
 * @param {number} amount - The amount of XP to add.
 */
async function addXP(uid, amount) {
    if (!uid || !amount || amount <= 0) return;
    
    const userRef = doc(db, 'users', uid);
    try {
        await runTransaction(db, async (transaction) => {
            const userSnap = await transaction.get(userRef);
            if (!userSnap.exists()) {
                throw "Document does not exist!";
            }

            // Get current user data from the transaction
            const userData = userSnap.data();
            let xp = userData.xp || 0;
            let level = userData.level || 1;
            let nextLevelXP = userData.nextLevelXP || LEVEL_CONFIG[0].xpToNext;
            
            let totalCoinReward = 0;
            
            // Add new XP
            xp += amount;

            // Loop to handle potential multiple level-ups
            while (xp >= nextLevelXP && nextLevelXP !== Infinity) {
                const currentLevelIndex = LEVEL_CONFIG.findIndex(l => l.level === level);
                
                if (currentLevelIndex < LEVEL_CONFIG.length - 1) {
                    const nextLevelInfo = LEVEL_CONFIG[currentLevelIndex + 1];
                    const rewardForThisLevel = 100 + (nextLevelInfo.level * 25);
                    
                    totalCoinReward += rewardForThisLevel;
                    xp -= nextLevelXP; // Carry over remaining XP to the next level
                    level = nextLevelInfo.level;
                    nextLevelXP = nextLevelInfo.xpToNext;

                    // Show level up alert (outside the transaction logic)
                    setTimeout(() => {
                       alert(`üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏õ‡πá‡∏ô Level ${nextLevelInfo.level} ‚Äì ${nextLevelInfo.name}!\n‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${rewardForThisLevel} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç!`);
                    }, 100);
                } else {
                    // Reached max level, break the loop
                    break;
                }
            }
            
            // Prepare the final data object for a single atomic update
            const finalUpdateData = {
                xp: xp,
                level: level,
                nextLevelXP: nextLevelXP,
            };
            if (totalCoinReward > 0) {
                finalUpdateData.coins = increment(totalCoinReward);
            }
            
            // Perform a single, combined update at the end of the transaction
            transaction.update(userRef, finalUpdateData);
        });
    } catch (error) {
        console.error("Error adding XP and leveling up: ", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° XP ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏•‡πÄ‡∏ß‡∏•");
    }
}


// ================== Global State ==================
let transactions = [];
let goals = [];
let currentGoalIndex = 0;
let unsubscribeListeners = [];
const allBadges = [ // Define all available badges for the application
    { id: 'first_transaction', name: '‡∏ô‡∏±‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà', description: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', icon: '‚úçÔ∏è' },
    { id: 'first_goal', name: '‡∏ú‡∏π‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢', description: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡πÅ‡∏£‡∏Å', icon: 'üéØ' },
    { id: 'saving_streak_3', name: '‡∏≠‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 3 ‡∏ß‡∏±‡∏ô', description: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏° 3 ‡∏ß‡∏±‡∏ô‡∏ï‡∏¥‡∏î', icon: 'üî•' },
];


// ================== Authentication Observer ==================
onAuthStateChanged(auth, (user) => {
    if (user) {
        // User is signed in
        console.log("User logged in:", user.uid);
        attachRealtimeListeners(user.uid);
        giveDailyLoginReward(user.uid);
    } else {
        // User is signed out
        console.log("User logged out.");
        detachRealtimeListeners();
        resetUIToLoggedOutState();
    }
});


// ================== Real-time Data Listeners ==================
function attachRealtimeListeners(uid) {
    detachRealtimeListeners(); 

    // --- Profile Listener ---
    const userProfileListener = onSnapshot(doc(db, 'users', uid), (docSnapshot) => {
        if (docSnapshot.exists()) {
            const userData = docSnapshot.data();
            updateProfileUI(userData, auth.currentUser);
            renderShop(userData); 
        } else {
            // Create a new user profile if it doesn't exist
            const newUserProfile = {
                displayName: auth.currentUser.displayName || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà",
                level: 1, // Store level number instead of string
                xp: 0,
                nextLevelXP: LEVEL_CONFIG[0].xpToNext, // Get initial XP requirement from config
                quote: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà!",
                badges: [],
                coins: 0,
                inventory: [],
                lastLoginReward: ''
            };
            setDoc(doc(db, 'users', uid), newUserProfile);
        }
    }, (error) => console.error("Error listening to user profile:", error));

    // --- Transactions Listener ---
    const transactionsQuery = query(collection(db, 'users', uid, 'transactions'), orderBy('date', 'desc'));
    const transactionsListener = onSnapshot(transactionsQuery, (snapshot) => {
        transactions = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        displayTransactions();
        updateFinancialSummary();
    }, (error) => console.error("Error listening to transactions:", error));

    // --- Goals Listener ---
    const goalsQuery = query(collection(db, 'users', uid, 'goals'), orderBy('createdAt', 'desc'));
    const goalsListener = onSnapshot(goalsQuery, (snapshot) => {
        goals = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        currentGoalIndex = 0;
        displayGoals();
    }, (error) => console.error("Error listening to goals:", error));

    unsubscribeListeners = [userProfileListener, transactionsListener, goalsListener];
}

function detachRealtimeListeners() {
    unsubscribeListeners.forEach(unsubscribe => unsubscribe());
    unsubscribeListeners = [];
    console.log("Detached all real-time listeners.");
}

// ================== Shop & Daily Reward System ==================
const shopItems = [
    { id: 'bank', name: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏°', price: 100, icon: 'üè¶' },
    { id: 'invest', name: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô', price: 120, icon: 'üíπ' },
    { id: 'planner', name: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô', price: 110, icon: 'üìù' },
    { id: 'debt', name: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏õ‡∏•‡∏≠‡∏î‡∏´‡∏ô‡∏µ‡πâ', price: 90, icon: 'üí∏' },
    { id: 'income', name: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á', price: 80, icon: 'üåê' },
    { id: 'entrepreneur', name: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£', price: 150, icon: 'üí°' },
    { id: 'dreamer', name: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ô‡∏±‡∏Å‡∏ù‡∏±‡∏ô', price: 70, icon: 'üí≠' },
    { id: 'superstar', name: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏î‡∏≤‡∏ß‡∏£‡∏∏‡πà‡∏á', price: 200, icon: 'üåü' },
    { id: 'gold', name: '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥', price: 300, icon: 'ü™ô' }
];

/**
 * Renders the shop and purchased items into two separate containers.
 * @param {object} user - The user data object from Firestore.
 */
function renderShop(user) {
    const shopContainer = document.getElementById('shopItemsRow');
    const purchasedContainer = document.getElementById('purchasedItemsContainer');
    const userCoinsEl = document.getElementById('userCoins');

    if (!purchasedContainer || !userCoinsEl) {
        console.warn("Could not find 'purchasedItemsContainer' or 'userCoins'. Shop rendering skipped.");
        return;
    }
    
    userCoinsEl.textContent = user.coins || 0;
    const inventory = user.inventory || [];

    purchasedContainer.innerHTML = '';
    if (shopContainer) {
        shopContainer.innerHTML = '';
    }

    let hasPurchasedItems = false;
    let hasShopItems = false;
    const userCoins = user.coins || 0;

    shopItems.forEach(item => {
        const isPurchased = inventory.includes(item.id);

        if (isPurchased) {
            hasPurchasedItems = true;
            const purchasedEl = document.createElement('div');
            purchasedEl.className = 'purchased-item';
            purchasedEl.innerHTML = `
                <span class="purchased-icon">${item.icon}</span>
                <span class="purchased-name">${item.name}</span>
            `;
            purchasedContainer.appendChild(purchasedEl);
        } else if (shopContainer) { 
            hasShopItems = true;
            const canAfford = userCoins >= item.price;
            const shopEl = document.createElement('div');
            shopEl.className = 'shop-item';
            shopEl.innerHTML = `
                <div class="item-icon">${item.icon}</div>
                <div class="item-name">${item.name}</div>
                <div class="item-price">${item.price} ü™ô</div>
                <button
                    onclick="buyItem('${auth.currentUser.uid}', '${item.id}', ${item.price})"
                    ${!canAfford ? 'disabled' : ''}
                    class="${!canAfford ? 'cannot-afford' : ''}"
                >
                    ‡∏ã‡∏∑‡πâ‡∏≠
                </button>
            `;
            shopContainer.appendChild(shopEl);
        }
    });

    if (!hasPurchasedItems) {
        purchasedContainer.innerHTML = '<p class="placeholder-message">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</p>';
    }
    if (shopContainer && !hasShopItems) {
        shopContainer.innerHTML = '<p class="placeholder-message">‡∏Ñ‡∏∏‡∏ì‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß!</p>';
    }
}


async function buyItem(uid, itemId, price) {
    const userRef = doc(db, 'users', uid);
    const userSnap = await getDoc(userRef);

    if (!userSnap.exists()) return alert('Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');

    const user = userSnap.data();
    if ((user.coins || 0) < price) return alert('‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ');
    if ((user.inventory || []).includes(itemId)) return alert('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');

    try {
        await updateDoc(userRef, {
            coins: increment(-price),
            inventory: arrayUnion(itemId)
        });
        alert('‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    } catch (error) {
        console.error("Error buying item:", error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠: ' + error.message);
    }
}


async function giveDailyLoginReward(uid) {
    const userRef = doc(db, 'users', uid);
    const userSnap = await getDoc(userRef);

    if (!userSnap.exists()) return;

    const user = userSnap.data();
    const todayStr = new Date().toISOString().slice(0, 10); // YYYY-MM-DD format

    if (user.lastLoginReward !== todayStr) {
        try {
            await updateDoc(userRef, {
                lastLoginReward: todayStr
            });
            await addXP(uid, 15); // Grant 15 XP for daily login
            alert('‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô +15 XP!');
        } catch (error) {
            console.error("Error giving daily reward:", error);
        }
    }
}

// ================== UI Update Functions ==================
function resetUIToLoggedOutState() {
    updateProfileUI({}, null);
    updateFinancialSummary(); 
    document.getElementById('transactionsContainer').innerHTML = '<p class="no-transactions-message">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</p>';
    document.getElementById('goalTitle').textContent = "- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö -";
    document.getElementById('goalAmount').textContent = "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: 0.00 ‡∏ø";
    document.getElementById('goalSavings').textContent = "‡∏≠‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß: 0.00 ‡∏ø";
    document.getElementById('goalProgressBar').style.width = '0%';
    document.getElementById('goalProgressBar').textContent = '0%';
    document.getElementById('goalDueDate').textContent = "‡∏Å‡∏≥‡∏´‡∏ô‡∏î: -";
    document.getElementById('prevGoal').style.display = 'none';
    document.getElementById('nextGoal').style.display = 'none';

    // Clear shop and purchased items on logout
    const shopContainer = document.getElementById('shopItemsRow');
    const purchasedContainer = document.getElementById('purchasedItemsContainer');
    if (shopContainer) shopContainer.innerHTML = '<p class="placeholder-message">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</p>';
    if (purchasedContainer) purchasedContainer.innerHTML = '<p class="placeholder-message">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</p>';
    document.getElementById('userCoins').textContent = '0';
}

function updateProfileUI(userData, user) {
    const defaultAvatar = 'https://cdn-icons-png.flaticon.com/512/4712/4712035.png';
    document.getElementById('profilePicture').src = user?.photoURL || defaultAvatar;
    document.getElementById('usernameDisplay').textContent = userData?.displayName || user?.displayName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà';
    document.getElementById('userQuote').textContent = `"${userData?.quote || '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà!'}"`;
    
    const userLevelNum = userData?.level || 1;
    const levelInfo = LEVEL_CONFIG.find(l => l.level === userLevelNum) || LEVEL_CONFIG[0];
    document.getElementById('userLevel').textContent = `Level ${levelInfo.level} ‚Äì ${levelInfo.name}`;

    const currentXP = userData?.xp || 0;
    const nextLevelXP = userData?.nextLevelXP === Infinity ? 'MAX' : (userData?.nextLevelXP || levelInfo.xpToNext);
    const progressPercent = nextLevelXP !== 'MAX' && nextLevelXP > 0 ? (currentXP / nextLevelXP) * 100 : 100;
    
    document.getElementById('userProgress').style.width = `${progressPercent}%`;
    document.getElementById('progressValue').textContent = `${Math.round(progressPercent)}%`;
    document.getElementById('currentXP').textContent = currentXP;
    document.getElementById('nextLevelXP').textContent = nextLevelXP;

    const badgesContainer = document.getElementById('userBadges');
    if (badgesContainer) {
        badgesContainer.innerHTML = '';
        const userUnlockedBadgeIds = userData?.badges || [];
        if (allBadges.length > 0) {
            allBadges.forEach(badgeData => {
                const badgeDiv = document.createElement('div');
                badgeDiv.classList.add('badge');
                const isUnlocked = userUnlockedBadgeIds.includes(badgeData.id);
                badgeDiv.classList.toggle('unlocked', isUnlocked);
                badgeDiv.classList.toggle('locked', !isUnlocked);
                badgeDiv.setAttribute('title', `${isUnlocked ? '' : '‡∏•‡πá‡∏≠‡∏Ñ - '}${badgeData.name}: ${badgeData.description}`);
                badgeDiv.textContent = badgeData.icon;
                badgesContainer.appendChild(badgeDiv);
            });
        } else {
            badgesContainer.innerHTML = '<div class="badge placeholder" title="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ï‡∏£‡∏≤">‚ùì</div>';
        }
    }
}

function updateFinancialSummary() {
    const totalIncome = transactions.filter(tx => tx.type === 'income').reduce((sum, tx) => sum + parseFloat(tx.amount), 0);
    const totalExpense = transactions.filter(tx => tx.type === 'expense').reduce((sum, tx) => sum + parseFloat(tx.amount), 0);
    const balance = totalIncome - totalExpense;

    document.getElementById('income').textContent = `${totalIncome.toFixed(2)} ‡∏ø`;
    document.getElementById('expense').textContent = `${totalExpense.toFixed(2)} ‡∏ø`;
    document.getElementById('balance').textContent = `${balance.toFixed(2)} ‡∏ø`;
}

function displayTransactions() {
    const container = document.getElementById('transactionsContainer');
    container.innerHTML = '';
    if (transactions.length === 0) {
        container.innerHTML = '<p class="no-transactions-message">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>';
        return;
    }
    transactions.forEach(tx => {
        const item = document.createElement('div');
        item.className = 'transaction-item';
        item.innerHTML = `
            <div class="transaction-details">
                <h3>${tx.description}</h3>
                <p>${new Date(tx.date).toLocaleDateString('th-TH')}</p>
            </div>
            <div class="transaction-amount ${tx.type}">
                ${tx.type === 'income' ? '+' : '-'} ${parseFloat(tx.amount).toFixed(2)} ‡∏ø
            </div>
            <button class="delete-btn" onclick="window.deleteTransaction('${tx.id}')">&times;</button>
        `;
        container.appendChild(item);
    });
}

function displayGoals() {
    const prevBtn = document.getElementById('prevGoal');
    const nextBtn = document.getElementById('nextGoal');

    if (goals.length === 0) {
        document.getElementById('goalTitle').style.display = 'none';
        document.getElementById('goalAmount').style.display = 'none';
        document.getElementById('goalSavings').style.display = 'none';
        document.getElementById('goalProgressBar').parentElement.style.display = 'none';
        document.getElementById('goalDueDate').style.display = 'none';
        document.getElementById('noGoalMsg').style.display = 'block';
        prevBtn.style.display = 'none';
        nextBtn.style.display = 'none';
        return;
    }
    
    document.getElementById('noGoalMsg').style.display = 'none';
    document.getElementById('goalTitle').style.display = 'block';
    document.getElementById('goalAmount').style.display = 'block';
    document.getElementById('goalSavings').style.display = 'block';
    document.getElementById('goalProgressBar').parentElement.style.display = 'flex';
    document.getElementById('goalDueDate').style.display = 'block';
    prevBtn.style.display = goals.length > 1 ? 'block' : 'none';
    nextBtn.style.display = goals.length > 1 ? 'block' : 'none';

    if (currentGoalIndex < 0) currentGoalIndex = goals.length - 1;
    if (currentGoalIndex >= goals.length) currentGoalIndex = 0;

    const goal = goals[currentGoalIndex];
    
    // ‚úÖ‚úÖ‚úÖ This is the corrected part. It checks for 'targetAmount' first, then falls back to 'target'.
    const target = parseFloat(goal.targetAmount || goal.target || 0);
    const saved = parseFloat(goal.savings || 0);
    const progress = target > 0 ? (saved / target) * 100 : 0;

    document.getElementById('goalTitle').textContent = goal.name;
    document.getElementById('goalAmount').textContent = `‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${target.toFixed(2)} ‡∏ø`;
    document.getElementById('goalSavings').textContent = `‡∏≠‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß: ${saved.toFixed(2)} ‡∏ø`;
    document.getElementById('goalProgressBar').style.width = `${Math.min(100, progress).toFixed(0)}%`;
    document.getElementById('goalProgressBar').textContent = `${Math.min(100, progress).toFixed(0)}%`;
    document.getElementById('goalDueDate').textContent = goal.dueDate ? `‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${new Date(goal.dueDate).toLocaleDateString('th-TH')}` : "‡∏Å‡∏≥‡∏´‡∏ô‡∏î: -";
}

// ================== Data Manipulation Functions ==================
window.deleteTransaction = async function(transactionId) {
    if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?") && auth.currentUser) {
        try {
            await deleteDoc(doc(db, "users", auth.currentUser.uid, "transactions", transactionId));
            alert("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        } catch (error) {
            console.error("Error removing transaction: ", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö: " + error.message);
        }
    }
}

// ================== DOM Event Listeners ==================
document.addEventListener('DOMContentLoaded', () => {
    // Goal Form Submission
    const goalForm = document.getElementById('goalForm');
    if (goalForm) {
        goalForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const user = auth.currentUser;
            if (!user) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");

            const name = document.getElementById('goalNameInput').value.trim();
            const targetAmount = parseFloat(document.getElementById('goalTargetAmount').value);
            const savings = parseFloat(document.getElementById('goalCurrentSavings').value || 0);
            const dueDate = document.getElementById('goalDueDateInput').value;
            const messageDiv = document.getElementById('goalMessage');

            if (!name || isNaN(targetAmount) || targetAmount <= 0) {
                messageDiv.textContent = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
                messageDiv.style.color = "red";
                return;
            }

            try {
                await addDoc(collection(db, "users", user.uid, "goals"), {
                    name, targetAmount, savings, dueDate,
                    createdAt: serverTimestamp()
                });
                
                await addXP(user.uid, 50); 
                
                messageDiv.textContent = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (+50 XP)";
                messageDiv.style.color = "green";
                goalForm.reset();
                setTimeout(closeGoalModal, 1500);
            } catch (error) {
                messageDiv.textContent = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message;
                messageDiv.style.color = "red";
                console.error("Error adding goal: ", error);
            }
        });
    }

    document.getElementById('prevGoal')?.addEventListener('click', () => { currentGoalIndex--; displayGoals(); });
    document.getElementById('nextGoal')?.addEventListener('click', () => { currentGoalIndex++; displayGoals(); });

    const aiChatForm = document.getElementById('aiChatForm');
    if (aiChatForm) {
        aiChatForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const input = document.getElementById('aiChatInput');
            const message = input.value.trim();
            if (message) {
                appendMsg('user', message);
                input.value = '';
                const aiResponse = await getAiResponse(message);
                appendMsg('ai', aiResponse);
            }
        });
    }
});

// ================== Modal Control Functions ==================
function openGoalModal() { document.getElementById('goalModal').style.display = 'flex'; }
window.closeGoalModal = function() {
    document.getElementById('goalModal').style.display = 'none';
    document.getElementById('goalMessage').textContent = '';
    document.getElementById('goalForm').reset();
}

// ================== AI Chatbot Logic ==================
function appendMsg(sender, msg) {
    const historyBox = document.getElementById('aiChatHistory');
    const msgDiv = document.createElement('div');
    msgDiv.className = `chat-message ${sender}`;
    msgDiv.textContent = msg;
    historyBox.appendChild(msgDiv);
    historyBox.scrollTop = historyBox.scrollHeight;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á AI
 * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @returns {Promise<string>} - ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á AI
 */
async function getAiResponse(message) {
    return new Promise(resolve => {
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
        setTimeout(() => {
            const txt = message.toLowerCase();
            let responses = [];

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Keyword ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            if (txt.match(/(‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|hello|hi|‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ|‡∏ó‡∏±‡∏Å|‡∏î‡∏µ)/)) {
                responses = ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô' ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö üòä", "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö"];
            } else if (txt.match(/(‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£|‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£|‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á)/)) {
                responses = [
                    "‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô' ‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô, ‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô, ‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏ô‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö",
                    "‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°, ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô, ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!"
                ];
            } else if (txt.match(/(‡∏™‡∏á‡∏™‡∏±‡∏¢|‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°|‡∏ñ‡∏≤‡∏°|‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°|‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ)/)) {
                responses = [
                    "‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
                    "‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà!",
                    "‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?"
                ];
            } else if (txt.match(/(‡∏≠‡∏≠‡∏°|‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏≠‡∏°|‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô|‡∏≠‡∏¢‡∏≤‡∏Å‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô)/)) {
                responses = [
                    "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô",
                    "‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£ 50/30/20 ‡∏î‡∏π‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö: 50% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô, 30% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß, ‡πÅ‡∏•‡∏∞ 20% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö",
                    "‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ '‡∏≠‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ' ‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡∏ö‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"
                ];
            } else if (txt.match(/(‡πÄ‡∏Å‡∏°|‡πÄ‡∏Ñ‡∏ß‡∏™|‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç|‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤|level|‡πÅ‡∏ï‡πâ‡∏°|xp)/)) {
                responses = [
                    "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö XP ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢, ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏Ñ‡∏£‡∏±‡∏ö",
                    "XP ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏• ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡∏π‡∏™‡∏¥!",
                    "‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Å‡πá‡∏à‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏Ñ‡∏°‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤!"
                ];
            } else if (txt.match(/(‡∏•‡∏á‡∏ó‡∏∏‡∏ô|‡∏´‡∏∏‡πâ‡∏ô|‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô|‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô)/)) {
                responses = [
                    "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÅ‡∏ï‡πà‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å '‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏î‡∏±‡∏ä‡∏ô‡∏µ' (Index Fund) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ",
                    "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ 'DCA' (Dollar-Cost Averaging) ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏¢‡∏≠‡∏¢‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏ß‡∏î‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ‡∏î‡∏µ",
                    "‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô' ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3-6 ‡πÄ‡∏ó‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏≠‡∏∏‡πà‡∏ô‡πÉ‡∏à"
                ];
            } else if (txt.match(/(‡∏´‡∏ô‡∏µ‡πâ|‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô|‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï|‡∏ú‡πà‡∏≠‡∏ô)/)) {
                responses = [
                    "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏ß‡∏£‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏≥‡∏£‡∏∞‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ 'Avalanche'",
                    "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö",
                    "‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏´‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡πâ‡∏≠‡∏ô ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ '‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏´‡∏ô‡∏µ‡πâ' (Debt Consolidation) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡πÑ‡∏î‡πâ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏á"
                ];
            } else if (txt.match(/(‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì|‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô|budget|‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô)/)) {
                 responses = [
                    "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÅ‡∏Ñ‡πà‡∏•‡∏≠‡∏á‡∏à‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏•‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á",
                    "‡πÅ‡∏≠‡∏õ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ! ‡πÅ‡∏Ñ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢' ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ '‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô' ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
                    "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏π‡πâ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏á‡∏ö‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏î‡∏π‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£, ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö"
                 ];
            } else if (txt.match(/(‡∏†‡∏≤‡∏©‡∏µ|‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô|‡∏¢‡∏∑‡πà‡∏ô‡∏†‡∏≤‡∏©‡∏µ)/)) {
                responses = [
                    "‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï, RMF, SSF ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏•‡∏¢",
                    "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏¢‡∏∑‡πà‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏™‡∏°‡∏±‡∏¢‡∏ô‡∏µ‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö"
                ];
            } else if (txt.match(/(‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô|insurance)/)) {
                responses = [
                    "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏µ‡∏£‡πà‡∏°‡πÑ‡∏ß‡πâ‡∏Å‡∏±‡∏ô‡∏ù‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏ù‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
                    "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï, ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û, ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
                ];
            } else if (txt.match(/(‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢|goal)/)) {
                responses = [
                    "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß) ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ö‡πâ‡∏≤‡∏ô) ‡∏î‡∏π‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö",
                    "‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô' ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏î‡∏π‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏•‡∏¢!"
                ];
            } else if (txt.match(/(‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï|‡∏ö‡∏π‡πÇ‡∏£|credit score)/)) {
                responses = [
                    "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ö‡∏π‡πÇ‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô",
                    "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏ï‡∏±‡∏ß ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏™‡∏Å‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏î‡∏µ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö"
                ];
            } else if (txt.match(/(‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì|thank)/)) {
                responses = ["‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö üòä", "‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"];
            } else {
                // ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö Keyword ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                responses = [
                    "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô, ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô, ‡∏†‡∏≤‡∏©‡∏µ, ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö",
                    "‡∏ú‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
                    "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô '‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£'"
                ];
            }

            // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            const reply = responses[Math.floor(Math.random() * responses.length)];
            resolve(reply);
        }, 500); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    });
}
