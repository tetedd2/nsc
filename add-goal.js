// --- INITIALIZATION & EVENT LISTENERS ---

document.addEventListener('DOMContentLoaded', () => {
  // Set the minimum selectable date to today
  const today = new Date().toISOString().split('T')[0];
  const goalDateElement = document.getElementById('goalDate');
  if (goalDateElement) {
    goalDateElement.setAttribute('min', today);
  }

  // Add event listeners to form inputs for real-time preview
  const formInputs = ['goalName', 'goalAmount', 'goalDate', 'planType'];
  formInputs.forEach(id => {
    const element = document.getElementById(id);
    if (element) {
      element.addEventListener('input', previewPlan);
    }
  });

  // Fetch and display existing goals when the page loads
  displayCurrentGoals();
});


// --- GOAL DISPLAY & MANAGEMENT ---

/**
 * Fetches goals from Firebase and displays them on the page using a real-time listener.
 */
function displayCurrentGoals() {
  firebase.auth().onAuthStateChanged(function(user) {
    const goalListContainer = document.getElementById('currentGoalsList');
    // Ensure the container element exists before proceeding
    if (!goalListContainer) {
      console.error("Error: The element with id 'currentGoalsList' was not found in the DOM.");
      return;
    }

    if (!user) {
      goalListContainer.innerHTML = '<div class="no-goals-message">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>';
      return;
    }

    goalListContainer.innerHTML = '<div class="loading-message">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢...</div>';

    // Use onSnapshot for real-time updates
    db.collection("users").doc(user.uid).collection("goals").orderBy("createdAt", "desc").onSnapshot(snapshot => {
      goalListContainer.innerHTML = ""; // Clear previous list
      if (snapshot.empty) {
        goalListContainer.innerHTML = `<div class="no-goals-message">- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ -</div>`;
        return;
      }
      snapshot.forEach(doc => {
        const goal = doc.data();
        goal.id = doc.id;
        
        goal.savings = goal.plan ? goal.plan.reduce((sum, p) => sum + (parseFloat(p.saved) || 0), 0) : 0;
        const percent = goal.targetAmount > 0 ? ((goal.savings / goal.targetAmount) * 100) : 0;
        
        const goalBlock = document.createElement('div');
        goalBlock.classList.add('goal-block');
        goalBlock.innerHTML = `
          <button class="delete-btn" title="‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ" onclick="deleteGoal('${goal.id}', '${goal.name.replace(/'/g, "\\'")}')">‚úñ</button>
          <div class="goal-title">${goal.name}</div>
          <div class="goal-money">
            ‡∏≠‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß: <span class="current-savings">‡∏ø${goal.savings.toLocaleString('th-TH', {maximumFractionDigits: 2})}</span> / 
            <span class="total-amount">‡∏ø${goal.targetAmount.toLocaleString('th-TH', {maximumFractionDigits: 2})}</span>
            <span class="progress-text">(${percent.toFixed(0)}%)</span>
          </div>
          <div class="progress-bar-bg">
            <div class="progress-bar" style="width: ${percent}%"></div>
          </div>
          <div class="saving-plan-title">üìÖ ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏° (${planTypeText(goal.planType)})</div>
          <div class="saving-plan-list">
            ${goal.plan ? goal.plan.map((p, planIdx) => `
              <div class="saving-row">
                <div class="saving-row-info">
                  <b>‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà ${p.round}</b> (${p.date})<br>
                  ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: <b>${parseFloat(p.amount).toLocaleString('th-TH', {maximumFractionDigits: 2})}</b> ‡∏ö‡∏≤‡∏ó
                </div>
                <div class="saving-row-action">
                  <div class="bar-bg">
                    <div class="bar" style="width:${((parseFloat(p.saved) || 0)/parseFloat(p.amount)*100)||0}%"></div>
                  </div>
                  <span class="bar-label">‡∏≠‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß: <b>${(parseFloat(p.saved)||0).toLocaleString('th-TH', {maximumFractionDigits: 2})}</b> ‡∏ö‡∏≤‡∏ó</span>
                  <div class="saving-input-group">
                      <input type="number" class="saving-input" placeholder="‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" min="0" step="0.01">
                      <button class="add-saving-btn" onclick="addSavingToPlan('${goal.id}', ${planIdx}, this)">+ ‡∏≠‡∏≠‡∏°</button>
                  </div>
                </div>
              </div>
            `).join('') : '<i>‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°</i>'}
          </div>
        `;
        goalListContainer.appendChild(goalBlock);
      });
    }, error => {
        console.error("Error fetching goals: ", error);
        goalListContainer.innerHTML = `<div class="no-goals-message">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>`;
    });
  });
}

/**
 * Adds a specified amount to a saving plan installment using a secure transaction.
 */
function addSavingToPlan(goalId, planIdx, buttonElement) {
  const user = firebase.auth().currentUser;
  if (!user) { return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô"); }

  const inputElement = buttonElement.closest('.saving-input-group').querySelector('.saving-input');
  const saveAmount = parseFloat(inputElement.value);

  if (isNaN(saveAmount) || saveAmount <= 0) { return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0"); }
  
  const goalRef = db.collection("users").doc(user.uid).collection("goals").doc(goalId);

  db.runTransaction(transaction => {
    return transaction.get(goalRef).then(doc => {
      if (!doc.exists) { throw "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏û‡∏ö"; }
      
      const goal = doc.data();
      const plan = goal.plan || [];
      if (!plan[planIdx]) { throw "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ"; }
      
      const currentSaved = parseFloat(plan[planIdx].saved) || 0;
      const targetAmountForInstallment = parseFloat(plan[planIdx].amount);
      let newSavedAmount = currentSaved + saveAmount;

      if (newSavedAmount > targetAmountForInstallment) {
        alert(`‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ (${(newSavedAmount - targetAmountForInstallment).toFixed(2)} ‡∏ö‡∏≤‡∏ó) ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`);
        newSavedAmount = targetAmountForInstallment;
      }
      
      plan[planIdx].saved = newSavedAmount;
      const totalSavings = plan.reduce((sum, p) => sum + (parseFloat(p.saved) || 0), 0);

      transaction.update(goalRef, { plan: plan, savings: totalSavings });
    });
  }).then(() => {
    console.log(`Transaction successfully committed for goal ${goalId}!`);
    inputElement.value = ''; // Clear input on success
  }).catch(error => {
    console.error("Transaction failed: ", error);
    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°: " + error);
  });
}


/**
 * Deletes a goal from Firebase after user confirmation.
 */
function deleteGoal(goalId, goalName) {
  if (!confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ "${goalName}" ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ`)) return;
  
  const user = firebase.auth().currentUser;
  if (user) {
    db.collection("users").doc(user.uid).collection("goals").doc(goalId).delete()
      .catch(error => {
        console.error("Error removing goal: ", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢");
      });
  }
}

/**
 * Converts plan type key to readable Thai text.
 */
function planTypeText(type) {
  const types = {
    daily_divide: "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô)",
    daily_fixed: "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏™‡∏π‡∏ï‡∏£ 20 ‡∏á‡∏ß‡∏î)",
    weekly: "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
    monthly: "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    once: "‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"
  };
  return types[type] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
}


// --- FORM INTERACTIVITY & PREVIEW ---

/**
 * Displays a real-time preview of the savings plan.
 */
function previewPlan() {
  const goalAmount = parseFloat(document.getElementById('goalAmount').value);
  const goalDateStr = document.getElementById('goalDate').value;
  const planType = document.getElementById('planType').value;
  const previewBox = document.getElementById('planPreview');
  const submitButton = document.querySelector('.primary-button');

  if (!goalAmount || !goalDateStr || goalAmount <= 0) {
    previewBox.style.display = 'none';
    submitButton.disabled = true;
    return;
  }

  const today = new Date(); today.setHours(0, 0, 0, 0);
  const endDate = new Date(goalDateStr); endDate.setHours(0, 0, 0, 0);

  let text = "";
  let isValid = true;
  previewBox.classList.remove('warning');

  if (endDate < today) {
    text = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï';
    isValid = false;
    previewBox.classList.add('warning');
  } else {
    const daysDiff = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24));
    switch (planType) {
      case 'monthly':
        const monthDiff = (endDate.getFullYear() - today.getFullYear()) * 12 + (endDate.getMonth() - today.getMonth()) + 1;
        const numMonths = monthDiff > 0 ? monthDiff : 1;
        text = `‡∏≠‡∏≠‡∏° <b>${(goalAmount / numMonths).toLocaleString('th-TH', {maximumFractionDigits: 2})}</b> ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (${numMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)`;
        break;
      case 'weekly':
        const numWeeks = Math.ceil(daysDiff / 7) || 1;
        text = `‡∏≠‡∏≠‡∏° <b>${(goalAmount / numWeeks).toLocaleString('th-TH', {maximumFractionDigits: 2})}</b> ‡∏ö‡∏≤‡∏ó/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (${numWeeks} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)`;
        break;
      case 'daily_divide':
        const numDays = daysDiff >= 0 ? daysDiff + 1 : 1;
        text = `‡∏≠‡∏≠‡∏° <b>${(goalAmount / numDays).toLocaleString('th-TH', {maximumFractionDigits: 2})}</b> ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô (${numDays} ‡∏ß‡∏±‡∏ô)`;
        break;
      case 'daily_fixed':
        if (daysDiff < 19) {
          text = '<b>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:</b> ‡πÅ‡∏ú‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ß‡∏±‡∏ô';
          previewBox.classList.add('warning');
        } else {
          text = `‡∏≠‡∏≠‡∏° <b>${(goalAmount * 0.05).toLocaleString('th-TH', {maximumFractionDigits: 2})}</b> ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô (20 ‡∏á‡∏ß‡∏î)`;
        }
        break;
      case 'once':
        text = `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ <b>${goalAmount.toLocaleString('th-TH')}</b> ‡∏ö‡∏≤‡∏ó`;
        break;
    }
  }
  previewBox.innerHTML = text;
  previewBox.style.display = 'block';
  submitButton.disabled = !isValid;
}


// --- SAVING NEW GOAL ---

/**
 * Calculates the saving plan installments.
 * @returns {Array} An array of plan installment objects.
 */
function calculateSavingPlan(planType, goalAmount, today, endDate) {
    let savingPlan = [];
    switch (planType) {
        case 'monthly': {
            const monthDiff = (endDate.getFullYear() - today.getFullYear()) * 12 + (endDate.getMonth() - today.getMonth()) + 1;
            const numInstallments = monthDiff > 0 ? monthDiff : 1;
            const perInstallment = goalAmount / numInstallments;
            for (let i = 0; i < numInstallments; i++) {
                let d = new Date(today); d.setMonth(d.getMonth() + i);
                savingPlan.push({ round: i + 1, date: d.toLocaleDateString('th-TH', { year: 'numeric', month: 'short' }), amount: perInstallment.toFixed(2), saved: 0 });
            } break;
        }
        case 'weekly': {
            const daysDiff = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24));
            const numInstallments = Math.ceil(daysDiff / 7) || 1;
            const perInstallment = goalAmount / numInstallments;
            for (let i = 0; i < numInstallments; i++) {
                let d = new Date(today); d.setDate(d.getDate() + i * 7);
                savingPlan.push({ round: i + 1, date: d.toLocaleDateString('th-TH', { year: 'numeric', month: 'short', day: 'numeric' }), amount: perInstallment.toFixed(2), saved: 0 });
            } break;
        }
        case 'daily_divide': {
            const daysDiff = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24)) + 1;
            const numInstallments = daysDiff > 0 ? daysDiff : 1;
            const perInstallment = goalAmount / numInstallments;
            for (let i = 0; i < numInstallments; i++) {
                let d = new Date(today); d.setDate(d.getDate() + i);
                savingPlan.push({ round: i + 1, date: d.toLocaleDateString('th-TH', { year: 'numeric', month: 'short', day: 'numeric' }), amount: perInstallment.toFixed(2), saved: 0 });
            } break;
        }
        case 'daily_fixed': {
            const numInstallments = 20; const perInstallment = goalAmount * 0.05;
            for (let i = 0; i < numInstallments; i++) {
                let d = new Date(today); d.setDate(d.getDate() + i);
                savingPlan.push({ round: i + 1, date: d.toLocaleDateString('th-TH', { year: 'numeric', month: 'short', day: 'numeric' }), amount: perInstallment.toFixed(2), saved: 0 });
            } break;
        }
        case 'once': {
            savingPlan.push({ round: 1, date: endDate.toLocaleDateString('th-TH', { year: 'numeric', month: 'short', day: 'numeric' }), amount: goalAmount.toFixed(2), saved: 0 });
            break;
        }
    }
    return savingPlan;
}

/**
 * Saves the new goal to Firebase.
 */
function saveGoal(event) {
  event.preventDefault();
  const form = document.getElementById('addGoalForm');
  const goalName = document.getElementById('goalName').value.trim();
  const goalAmount = parseFloat(document.getElementById('goalAmount').value);
  const goalDate = document.getElementById('goalDate').value;
  const planType = document.getElementById('planType').value;

  if (!goalName || !goalAmount || !goalAmount || !goalDate) { return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"); }

  const today = new Date(); today.setHours(0, 0, 0, 0);
  const endDate = new Date(goalDate); endDate.setHours(0, 0, 0, 0);

  if (endDate < today) { return alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÑ‡∏î‡πâ"); }
  if (planType === 'daily_fixed' && (endDate - today) / (1000 * 60 * 60 * 24) < 19) {
      return alert("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô '‡∏≠‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (20 ‡∏á‡∏ß‡∏î x 5%)' ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ß‡∏±‡∏ô");
  }

  const savingPlan = calculateSavingPlan(planType, goalAmount, today, endDate);
  const user = firebase.auth().currentUser;

  if (user) {
    const goal = {
      name: goalName,
      targetAmount: goalAmount,
      savings: 0,
      dueDate: goalDate,
      planType: planType,
      plan: savingPlan,
      createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      status: 'active'
    };

    db.collection("users").doc(user.uid).collection("goals").add(goal)
      .then(() => {
        alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        form.reset();
        previewPlan();
      })
      .catch(err => {
          console.error("Error adding document: ", err);
          alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: " + err.message);
      });
  } else {
    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  }
}
