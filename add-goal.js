function saveGoal(event) {
  event.preventDefault();
  const goalName = document.getElementById('goalName').value.trim();
  const goalAmount = parseFloat(document.getElementById('goalAmount').value);
  const goalDate = document.getElementById('goalDate').value;
  const planType = document.getElementById('planType').value;
  if (!goalName || !goalAmount || goalAmount <= 0 || !goalDate) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
    return;
  }

  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const endDate = new Date(goalDate);
  endDate.setHours(0, 0, 0, 0);
  let savingPlan = [];
  let numInstallments = 1;
  let perInstallment = goalAmount;

  if (planType === "daily") {
    numInstallments = 20;
    perInstallment = goalAmount * 0.05;
    if ((endDate - today) / (1000 * 60 * 60 * 24) < numInstallments - 1) {
      alert("‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏ß‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏ú‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô 5% ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà");
      return;
    }
    for (let i = 0; i < numInstallments; i++) {
      let d = new Date(today);
      d.setDate(d.getDate() + i);
      savingPlan.push({
        round: i + 1,
        date: d.toLocaleDateString('th-TH', { year: 'numeric', month: 'short', day: 'numeric' }),
        amount: perInstallment.toFixed(2),
        saved: 0
      });
    }
  } else if (planType === "weekly") {
    const daysDiff = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24));
    numInstallments = Math.ceil(daysDiff / 7);
    if (numInstallments < 1) numInstallments = 1;
    perInstallment = goalAmount / numInstallments;
    for (let i = 0; i < numInstallments; i++) {
      let d = new Date(today);
      d.setDate(d.getDate() + i * 7);
      savingPlan.push({
        round: i + 1,
        date: d.toLocaleDateString('th-TH', { year: 'numeric', month: 'short', day: 'numeric' }),
        amount: perInstallment.toFixed(2),
        saved: 0
      });
    }
  } else if (planType === "monthly") {
    const monthDiff =
      (endDate.getFullYear() - today.getFullYear()) * 12 +
      (endDate.getMonth() - today.getMonth()) + 1;
    numInstallments = monthDiff;
    if (numInstallments < 1) numInstallments = 1;
    perInstallment = goalAmount / numInstallments;
    for (let i = 0; i < numInstallments; i++) {
      let d = new Date(today);
      d.setMonth(d.getMonth() + i);
      savingPlan.push({
        round: i + 1,
        date: d.toLocaleDateString('th-TH', { year: 'numeric', month: 'short' }),
        amount: perInstallment.toFixed(2),
        saved: 0
      });
    }
  } else { // Handle "once" scenario, although not in the original prompt logic, good to have.
    savingPlan.push({
      round: 1,
      date: endDate.toLocaleDateString('th-TH', { year: 'numeric', month: 'short', day: 'numeric' }),
      amount: goalAmount.toFixed(2),
      saved: 0
    });
  }


  firebase.auth().onAuthStateChanged(function (user) {
    if (user) {
      const goal = {
        name: goalName,
        target: goalAmount,
        savings: 0, // Initial savings is 0
        date: goalDate,
        planType: planType,
        plan: savingPlan,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
      };
      db.collection("users").doc(user.uid).collection("goals").add(goal)
        .then(() => {
          alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
          window.history.back(); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
        })
        .catch(err => alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + err.message));
    } else {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
    }
  });
}

function updateGoalList() {
  firebase.auth().onAuthStateChanged(function (user) {
    if (!user) return;
    db.collection("users").doc(user.uid).collection("goals").orderBy("createdAt", "desc").get()
      .then(snapshot => {
        const goalListContainer = document.getElementById('goalContent');
        goalListContainer.innerHTML = "";
        if (snapshot.empty) {
          goalListContainer.innerHTML = `<div class="goal-title">- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ -</div>`;
          return;
        }
        snapshot.forEach(doc => {
          const goal = doc.data();
          goal.id = doc.id;
          // Calculate total savings from the plan
          goal.savings = goal.plan ? goal.plan.reduce((sum, p) => sum + (parseFloat(p.saved) || 0), 0) : 0;
          const percent = goal.target > 0 ? ((goal.savings / goal.target) * 100).toFixed(0) : 0;
          
          const goalBlock = document.createElement('div');
          goalBlock.classList.add('goal-block');
          goalBlock.innerHTML = `
            <button class="delete-btn" title="‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ" onclick="deleteGoal('${goal.id}')">‚úñ</button>
            <div class="goal-title"><span class="goal-name">üìå ${goal.name}</span></div>
            <div class="goal-money">
              üí∞ ‡∏ø<span class="current-savings">${goal.savings.toFixed(2)}</span>
              / ‡∏ø<span class="total-amount">${goal.target.toFixed(2)}</span>
              <span class="progress-text">(${percent}%)</span>
            </div>
            <div class="progress-bar-bg">
              <div class="progress-bar" style="width: ${percent}%"></div>
            </div>
            <div class="saving-plan-title">üìÖ ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏° (${planTypeText(goal.planType)})</div>
            <div class="saving-plan-list">
              ${goal.plan ? goal.plan.map((p, planIdx) => {
                const remainingToSave = parseFloat(p.amount) - parseFloat(p.saved || 0);
                return `
                <div class="saving-row">
                  <div style="font-size:0.97rem; color:#00796b;">
                    ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà ${p.round}<br>(${p.date})<br><b>${parseFloat(p.amount).toFixed(2)}</b> ‡∏ö‡∏≤‡∏ó
                  </div>
                  <div class="bar-bg">
                    <div class="bar" style="width:${(p.saved/p.amount*100)||0}%"></div>
                  </div>
                  <span class="bar-label">‡∏≠‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß: <b>${(parseFloat(p.saved)||0).toFixed(2)}</b> / ${parseFloat(p.amount).toFixed(2)} ‡∏ö‡∏≤‡∏ó</span>
                  <input type="number" class="saving-input" placeholder="‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" min="0" step="0.01" value="${remainingToSave > 0 ? remainingToSave.toFixed(2) : ''}">
                  <button class="bar-btn" onclick="addSavingToPlan('${goal.id}',${planIdx}, this)">+ ‡∏≠‡∏≠‡∏°</button>
                </div>
              `;
              }).join('') : '<i>‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô</i>'}
            </div>
          `;
          goalListContainer.appendChild(goalBlock);
        });
      });
  });
}

function planTypeText(type) {
  if (type === "daily") return "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô";
  if (type === "weekly") return "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå";
  if (type === "monthly") return "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô";
  if (type === "once") return "‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"; // Added for completeness
  return "";
}

function addSavingToPlan(goalId, planIdx, buttonElement) { // ‡∏£‡∏±‡∏ö buttonElement ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  firebase.auth().onAuthStateChanged(function (user) {
    if (!user) return;
    
    // ‡∏´‡∏≤ input ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î
    const savingInput = buttonElement.parentNode.querySelector('.saving-input');
    let saveAmount = parseFloat(savingInput.value); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input field

    if (isNaN(saveAmount) || saveAmount <= 0) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
      return;
    }

    db.collection("users").doc(user.uid).collection("goals").doc(goalId).get()
      .then(doc => {
        if (!doc.exists) {
            alert("‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏û‡∏ö");
            return;
        }
        const goal = doc.data();
        let plan = goal.plan;

        if (!plan || !plan[planIdx]) {
            alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ");
            return;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ saved ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        plan[planIdx].saved = parseFloat(plan[planIdx].saved || 0); 
        const currentAmount = parseFloat(plan[planIdx].amount);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°
        plan[planIdx].saved += saveAmount;
        
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô
        if (plan[planIdx].saved > currentAmount) {
            plan[planIdx].saved = currentAmount;
            alert("‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ô‡∏±‡∏ö‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ");
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏°‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        goal.savings = plan.reduce((sum, p) => sum + (parseFloat(p.saved) || 0), 0);

        db.collection("users").doc(user.uid).collection("goals").doc(goalId).update({
          plan: plan,
          savings: goal.savings
        }).then(() => {
            alert("‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            savingInput.value = ''; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á input ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            updateGoalList(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        }).catch((error) => {
            console.error("Error updating goal: ", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°: " + error.message);
        });
      })
      .catch((error) => {
        console.error("Error fetching goal: ", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: " + error.message);
      });
  });
}

function deleteGoal(goalId) {
  if (!confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
  firebase.auth().onAuthStateChanged(function (user) {
    if (!user) return;
    db.collection("users").doc(user.uid).collection("goals").doc(goalId).delete().then(updateGoalList);
  });
}

// ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
document.addEventListener('DOMContentLoaded', updateGoalList);